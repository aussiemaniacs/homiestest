<analysis>
The AI engineer's work trajectory outlines the development of a comprehensive Kodi 21 MovieStream Pro addon. Initially, the AI addressed core functionalities like video playback, TMDB metadata, and GitHub JSON integration, and then iteratively expanded to include a Pro version with Cocoscrapers, debrid services, TV show support, and watchlist features. A persistent challenge throughout the trajectory was the user's struggle with implementing the provided code and integrating Cocoscrapers effectively. The AI consistently responded by providing full, explicit copy-paste code for corrected files, enhancing error handling, and improving debugging messages within the addon itself. The final interaction explicitly details the debugging process to ensure Cocoscrapers triggers correctly on click, highlighting the AI's commitment to resolving playback issues by refining data flow and UI interaction.
</analysis>

<product_requirements>
The MovieStream Pro Kodi 21 addon was designed to provide a comprehensive streaming solution. The core problem it solves is centralizing movie and TV show access from diverse sources within Kodi. Requirements include:
-   **Video Playback**: Supporting various formats (MP4, MKV, M3U, M3U8) and streaming types (direct URLs, YouTube, Vimeo, Dailymotion).
-   **Metadata**: Fetching detailed movie/TV show information (title, plot, artwork, ratings, cast) primarily from TMDB.
-   **GitHub Integration**: Allowing users to host and manage custom movie/TV show JSON databases on GitHub.
-   **Content Types**: Full support for both Movies and TV Shows, including season/episode browsing.
-   **Search**: Global search across integrated content sources.
-   **Advanced Features**:
    -   **Cocoscrapers**: Integration for scraping additional streaming links.
    -   **Debrid Services**: Support for premium link resolution (Real-Debrid, Premiumize, All-Debrid).
    -   **Subtitles**: Automatic downloading and multi-language support.
    -   **Personal Management**: Watchlist, Favorites, and Watch History with resume playback.
    -   **UI/UX**: Professional interface with categories, context menus, and artwork.
    -   **Tools**: In-app tools for connection testing, cache management, and debugging.
</product_requirements>

<key_technical_concepts>
-   **Kodi Addon Development**: Utilizes , ,  for Python-based addon creation.
-   **TMDB API**: Integration for fetching movie and TV show metadata.
-   **GitHub JSON**: Custom content management via JSON files hosted on GitHub.
-   **Cocoscrapers**: Third-party Python module for streaming source scraping.
-   **Debrid Services**: Integration with Real-Debrid, Premiumize, All-Debrid for premium links.
-   **Streaming Protocols**: Support for M3U and M3U8 (HLS) playback.
-   **Modular Design**: Code organized into client-specific Python modules.
</key_technical_concepts>

<code_architecture>
The application is structured as a Kodi addon (), intended for installation via ZIP or direct copy to Kodi's addons directory.

**Directory Structure:**


-   ****: Kodi manifest file. Defines addon ID (), name (), dependencies (e.g., , , , ), and entry point (). The latest version ensures optional dependencies for Cocoscrapers and ResolveURL.
-   ****: The core logic file. It handles addon navigation, menu display, user input routing, and orchestrates calls to various client modules for data fetching and playback.
    -   **Changes**: Received multiple iterations of fixes, particularly in Chat 28, 30, and 38, 44. Key fixes include enhanced import error handling for client modules, improved  and  functions to correctly initiate Cocoscrapers scraping with TMDB IDs and IMDB IDs, prioritized Cocoscrapers over direct links, better error reporting and notifications for missing sources or API issues, and the addition of  and  tools. The  function was updated to explicitly set  property and use  to ensure direct playback calls.
-   ****: Defines user-configurable addon settings. Includes API keys (TMDB, Debrid), GitHub URL, playback preferences (quality, subtitles, M3U/M3U8 support), Cocoscrapers settings (enable, auto-play, timeout, max sources), UI options, and cache management actions.
    -   **Changes**: Updated to include comprehensive settings for all Pro features (Cocoscrapers, Debrid, Watchlist, M3U/M3U8) and was explicitly set to default  to  and  to  seconds in the final fix (Chat 44).
-   ****: Contains internationalization strings for UI labels and messages, aligned with  IDs.
-   ****: Contains modular Python client scripts:
    -   ****: Empty, marks  as a Python package.
    -   ****: Handles integration with Cocoscrapers for source scraping.
        -   **Changes**: Received significant updates in Chat 28 and 42. Fixes include robust import handling for the  module, improved data formatting for  and  to pass correct TMDB/IMDB/TVDB IDs, refined progress dialog feedback, better error handling in scraping and filtering, enhanced source filtering logic, and improved  with multiple fallback methods (Cocoscrapers' own resolve methods and ). Display labels in  were also enhanced with color coding.
    -   ****: Manages Real-Debrid, Premiumize, and All-Debrid integrations for premium links. (Provided in Chat 24).
    -   ****: Fetches and parses JSON content from a specified GitHub repository. Includes schema examples for  and . (Provided in Chat 24).
    -   ****: Manages various direct streaming sources (e.g., YouTube, Vimeo, Dailymotion) and includes specific logic for M3U and M3U8 playlist files.
        -   **Changes**: Enhanced in Chat 26 to specifically support M3U and M3U8 playback, including master playlist parsing for M3U8.
    -   ****: Handles subtitle downloading and caching. (Provided in Chat 32).
    -   ****: Wraps TMDB API calls for movies and TV shows. (Provided in Chat 32).
    -   ****: Manages magnet links and integration with torrent streaming addons like Elementum or Torrest. (Provided in Chat 32).
    -   ****: Dedicated client for TV show browsing, season/episode details, and scraping episode sources using Cocoscrapers. (Provided in Chat 32).
    -   ****: Encapsulates logic for playing video URLs and setting Kodi  properties, including specific handling for HLS (M3U8) streams.
        -   **Changes**: Enhanced in Chat 26 to properly set  properties for M3U8/HLS.
    -   ****: Manages user watchlist, favorites, and playback history/resume points. (Content not explicitly provided in trajectory's final dump, but its functionality is used in ).
-   ****: Contains example JSON files (, , , , , ) demonstrating the structure required for custom content hosted on GitHub. (Provided in Chat 34).
</code_architecture>

<pending_tasks>
-   The user still needs to provide  and  files for the addon artwork.
-   The user needs to fully implement the provided code by copying all specified files into their GitHub repository as instructed in the final messages.
-   The user needs to install external Kodi dependencies like  and  for full functionality.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was engaged in a critical debugging loop to resolve the user's reported issue: nothing still happens when i click a link. no scraping please fix?. This indicates that despite previous attempts to integrate Cocoscrapers, the actual trigger for scraping when a user clicks on a movie or TV show item was still not functioning.

The AI's last action (Chat 44) was to provide a Complete Fix for Movie Clicking/Scraping. This fix primarily targets  and .

In , the  function was thoroughly revised:
-   It now explicitly logs  and  to aid debugging.
-   It includes an immediate user notification (Loading [Movie Title]...) to confirm the action has been triggered.
-   The  call is now placed as the **PRIORITY 1** source retrieval mechanism, ensuring it's attempted first.
-   The logic for retrieving  (crucial for accurate Cocoscrapers results) was reinforced.
-   Fallback to  (PRIORITY 2) and  (PRIORITY 3) from the local database is maintained if Cocoscrapers finds no sources.
-   The  function was also slightly refined for consistency.
-   Crucially, the  function now explicitly sets  and ensures  is called with  for playable items, which is essential for Kodi to recognize them as direct play links and trigger the  action.
-   New tools  and  were added to  and integrated into the  and router, enabling the user to directly test playback of a sample video and view internal addon status for easier troubleshooting.

In , the  setting was explicitly defaulted to  and the  set to  seconds, ensuring Cocoscrapers is active upon installation.

The work's nuance lies in iteratively refining the user interaction flow (click -> scrape -> resolve -> play) and ensuring robust error handling and debug visibility. The AI has provided the user with copy-paste code for these final fixes and instructions on how to test them, anticipating that this should resolve the core nothing happens when I click issue.
</current_work>

<optional_next_step>
Wait for the user to confirm if the provided fixes for Cocoscrapers integration and playback trigger have resolved the issue.
</optional_next_step>
